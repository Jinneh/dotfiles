#!/usr/bin/env zsh

trap 'kill 0' EXIT
trap 'exit' INT TERM QUIT

# -- Setup --
[[ -v PANEL_NAME ]] || PANEL_NAME="panel-$1"

xdo id -a $PANEL_NAME > /dev/null && return 1

# -- Settings --

# - monitor -
# Wait until bspwm is started and resolution can be obtained. Shouldn't take longer than 5s.
for _ in {1..25}; do
	# geometry:= 1:x, 2:y, 3: width, 4:height
	geometry=( $(bspc query --monitor "${1:-primary}" -T | jq '.rectangle[]') ) && break || sleep 0.2
done

(( $#geometry == 0 )) && return 1
(( geometry[1] += 3 ))
(( geometry[2] += 3 ))
(( geometry[3] -= 6 ))
height=28


# - font -
font='NotoSans Nerd Font:size=9'

# - colors -
bar_bg='#FDF6E3'
bar_fg='#657B83'
module_bg='#EEE8D5'
module_fg='#657B83'
highlight_fg='#76B9ED'

# ws
ws_focused_bg="#DFD9C6"
ws_focused_fg="#002B36"
ws_active_bg="#EEE8D5"
ws_active_fg="#002B36"
ws_free_bg="#F4EEDB"
ws_free_fg="#A1AFAF"
ws_occupied_bg="#EEE8D5"
ws_occupied_fg="#6B8DA1"
ws_urgent_bg=$ws_occupied_bg
ws_urgent_fg="#CB4B16"
ws_urgent_focused_bg=$ws_focused_bg
ws_urgent_focused_fg=$ws_focused_fg
ws_urgent_active_bg=$ws_active_bg
ws_urgent_active_fg=$ws_urgent_fg

# - spacing -
___='%{O3}' # space between modules
module_padding='%{O13}'

# - shorties -
module_left="%{B${module_bg}}%{F${module_fg}}${module_padding}"
module_right="${module_padding}%{B-}%{F-}"


# -- Icons --
typeset -A icons
icons[code]=''
icons[cubes]=''
icons[globe]=''
icons[mail]=''
icons[power]=''
icons[terminal]=''
icons[playback]='墳'
icons[playbackmute]='婢'
icons[capture]=''
icons[capturemute]=''

typeset -a desktop_icons
desktop_icons[1]='¹  '
desktop_icons[2]='²  '
desktop_icons[3]='³  '
desktop_icons[4]='⁴  '
desktop_icons[5]='⁵  '
desktop_icons[8]='⁸  '
desktop_icons[9]='⁹  '
desktop_icons[10]='⁰  '


# -- Pretty printer --


# $( ppTitle title )
ppTitle() {
	print "${module_left}$1${module_right}"
}


# $( ppClock )
ppClock() {
	local cmd="%D{%_H %M}"
	print "${module_left}${(%)cmd}${module_right}"
}


# $( ppDay )
ppDay() {
	local cmd="%D{%a %-d}"
	print "${module_left}${(%)cmd}${module_right}"
}


# $( ppMail )
ppMail() {
	local cmd="$(notmuch count tag:unread)"
	print "${module_left}${icons[mail]}%{O5}${cmd}${module_right}"
}


# $( ppPkg )
ppPkg() {
	IFS=$'\n' local cmd=${#$(checkupdates & cower -u)}
	print "${module_left}${icons[cubes]}%{O5}${cmd}${module_right}"
}


# $( ppPlayback )
ppPlayback() {
	local cmd=( $(amixer -M get Master) )
	local playback_level=${cmd[-2][2,-3]}

	if [[ ${cmd[-1]} == '[off]' ]]; then
		playback_state_icon=${icons[playbackmute]}
	else
		playback_state_icon=${icons[playback]}
	fi

	print "${module_left}${playback_state_icon}%{O5}${playback_level}${module_right}"
}


# $( ppCapture )
ppCapture() {
	local cmd=( $(amixer -M get Capture) )
	local capture_level=${cmd[-2][2,-3]}

	if [[ ${cmd[-1]} == '[off]' ]]; then
		capture_state_icon=${icons[capturemute]}
	else
		capture_state_icon=${icons[capture]}
	fi

	print "${module_left}${capture_state_icon}%{O5}${capture_level}${module_right}"
}


# $( ppDesktops <bspc wm -g> )
ppDesktops() {
	local -a desktops
	local ws_bg ws_fg name
	integer focused_monitor

	for item in ${(s.:.)1}; do
		name=${item[2,-1]}
		case $item in
			m* )
				focused_monitor=0
				continue
				;;
			M* )
				focused_monitor=1
				continue
				;;
			[FO]* )
				if (( $focused_monitor )); then
					ws_bg=$ws_focused_bg
					ws_fg=$ws_focused_fg
				else
					ws_bg=$ws_active_bg
					ws_fg=$ws_active_fg
				fi
				;;
			U* )
				if (( $focused_monitor )); then
					ws_bg=$ws_urgent_focused_bg
					ws_fg=$ws_urgent_focused_fg
				else
					ws_bg=$ws_urgent_active_bg
					ws_fg=$ws_urgent_active_fg
				fi
				;;
			f* ) # free|empty unfocused
				ws_bg=$ws_free_bg
				ws_fg=$ws_free_fg
				;;
			o* ) # occupied unfocused
				ws_bg=$ws_occupied_bg
				ws_fg=$ws_occupied_fg
				;;
			u* ) # urgent unfocused
				ws_bg=$ws_urgent_bg
				ws_fg=$ws_urgent_fg
				;;
			* )
				continue
		esac

		desktops[${name}]="%{B${ws_bg}}%{F${ws_fg}}${module_padding}${desktop_icons[$name]}${module_padding}%{B-}%{F-}"
	done

	# join and strip empty elements
	print "${(@pj.$___.)desktops:#}"
}



{
# -- Event generator --

	stdbuf -oL alsactl monitor pulse | while read line; do
		case ${line} in
			\#*Master\ Playback* ) print "p$(ppPlayback)" ;;
			\#*Capture* ) print "c$(ppCapture)" ;;
		esac
	done &

	xtitle -t 60 -sf "T$(ppTitle %s)\n" &

	while :; do
		print "C$(ppClock)"
		# 1 second past each minute
		sleep $(( ${(%):-"61-%D{%-S}"} ))
	done &

	while :; do
		print "D$(ppDay)"
		# 86400s = 24 * 60 * 60s   # Seconds in a day
		#  3600s = 60 * 60s        # Seconds in an hour
		# 1 minute past midnight
		sleep $(( ${(%):-"%D{86460-(%-H*3600+%-M*60+%-S)}"} ))
	done &

	while :; do
		print "P$(ppPkg)"
		sleep 3600
	done &

	while :; do
		print "M$(ppMail)"
		sleep 600
	done &

	bspc subscribe report | while read -r line; do
		print "W$(ppDesktops ${line:1})"
	done &

} 2> /dev/null | {

# -- Initializer --

	capture="$(ppCapture)"
	playback="$(ppPlayback)"

	# -- Event handler --

	while read -r cmd; do

		# Event origin
		case "$cmd" in
			W* ) updater='desktops' ;;
			T* ) updater='title' ;;
			D* ) updater='day' ;;
			C* ) updater='clock' ;;
			p* ) updater='playback' ;;
			c* ) updater='capture' ;;
			P* ) updater='pkg' ;;
			M* ) updater='mail' ;;
			* ) continue ;;
		esac

		local "$updater"="${cmd[2,-1]}"

		print "%{l}${title}%{c}${desktops}%{r}${mail}${___}${pkg}${___}${playback}${___}${capture}${___}${day}${___}${clock}"
	done

} | lemonbar -g "${geometry[3]}x${height}+${geometry[1]}+${geometry[2]}" -B "${bar_bg}" -F "${bar_fg}" -U "${bar_bg}" -u 3 -f "${font}" -n "$PANEL_NAME" &

target="$(xdo id -N Bspwm -n root)"
xdo above -t "${${(@o)target}[1]}" "$(xdo id -m -a "$PANEL_NAME")"

wait

